{"version":3,"sources":["components/loading-spinner/loading-spinner.component.js","components/graph-info/graph.component.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","marginLeft","spacing","LoadingSpinner","classes","className","CircularProgress","GraphInfo","useState","loading","setLoading","errorMessage","setErrorMessage","moment","subtract","format","start","setStart","end","setEnd","data","setData","useEffect","a","date1","date2","axios","get","res","body","forecast","intensity","actual","labels","parsing","responsive","datasets","label","backgroundColor","borderColor","borderWidth","response","error","message","getIntensity","validationSchema","Yup","shape","matches","required","length","initialValues","onSubmit","values","console","log","touched","handleSubmit","errors","handleBlur","handleChange","value","name","type","onChange","e","target","onBlur","Graph","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.29c54f4d.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function LoadingSpinner() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress  />\n      \n    </div>\n  );\n};\n","import React,{useEffect, useState}  from 'react'\nimport {Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport graphStyle from './graph.style.css'\n\n\nimport {Bar} from 'react-chartjs-2'\nimport LoadingSpinner from '../loading-spinner/loading-spinner.component'\nimport moment from \"moment\";\n\n\n\n\nconst GraphInfo = () => {\n\n    \n\nconst [loading, setLoading]= useState(true);\nconst [errorMessage, setErrorMessage] = useState(\"\")\n\nconst [start, setStart] = useState(\n  moment().subtract(7, \"days\").format(\"YYYY-MM-DD\")\n);\nconst [end, setEnd] = useState(moment().format(\"YYYY-MM-DD\"));\nconst [data, setData]= useState({})\n\n\n\n\n  //Api call wrapped in use effect to only render when the value changes   \n useEffect(() => {\n\n  \n\n   async function getIntensity() {\n       const date1 = moment(start).format(\"LLLL\");\n         const date2 = moment(end).format(\"LLLL\");\n\n         // try catch block to handle any potenital errors which may happen\n     try{\n       let res = await axios.get(`https://api.carbonintensity.org.uk/intensity/${start}/${end}`)\n    \n        \n         const body = res.data;\n         setLoading(false);\n         \n         const forecast = body.data[0].intensity.forecast;\n         const actual = body.data[0].intensity.actual;\n\n        \n         const graphData = {\n           labels: [date1 + \" to \" + date2],\n           parsing: false,\n           responsive: true,\n           \n           datasets: [\n             {\n               label: \"Forecast\",\n               data: [forecast],\n               backgroundColor: [\"rgba(44, 130, 201, 1)\"],\n               borderColor: [\"rgba(44, 130, 201, 1)\"],\n               borderWidth: 5,\n             },\n\n             {\n               label: \"Actual\",\n               data: [actual],\n               backgroundColor: [\"rgba(42, 187, 155, 1)\"],\n               borderColor: [\"rgba(42, 187, 155, 1)\"],\n               borderWidth: 5,\n             },\n             \n           ],\n   \n\n           \n         };\n\n         setData(graphData);\n     \n     } catch (err){\n    \n      setLoading(false)\n      setErrorMessage(err.response.data.error.message);\n        \n\n     }\n   \n   }\n\n   getIntensity();\n }, [end, start]);\n\n\n// validation to check that both input values match the regex\nconst validationSchema = Yup.object().shape({\n  start: Yup.string().matches(/^\\d{4}-\\d{2}-\\d{2}$/).required(),\n  end: Yup.string().matches(/^\\d{4}-\\d{2}-\\d{2}$/).required(),\n});\n\n\n\n\n\n\n    return (\n      <div className=\"container\">\n      \n        <div className=\"title\">\n          <h1 className=\"text\">National Grid</h1>\n          <p className=\"text\">\n            The carbon intensity of electricity is a measure of how much CO2\n            emissions are produced per kilowatt hour of electricity consumed.\n          </p>\n          <p className=\"text\">\n            The 'actual' value (green line) is the estimated carbon intensity\n            from metered generation. The 'forecast' value (blue line) is our\n            forecast. The carbon intensity of electricity is sensitive to small\n            changes in carbon-intensive generation. Carbon intensity varies by\n            hour, day, and season due to changes in electricity demand, low\n            carbon generation (wind, solar, hydro, nuclear, biomass) and\n            conventional generation.\n          </p>\n        </div>\n\n  {errorMessage.length > 0 && <div className=\"error\">{errorMessage}</div>}\n\n        <div className=\"chart\" >\n          {loading ? <LoadingSpinner /> : <Bar data={data} />}\n\n          <div className=\"user-input-section\">\n            <p className=\"text\">\n              Select a start date and end date in the boxes below in the format\n              YYYY-MM-DD. Data is retrieved in UTC time and is displayed in the\n              graph above. Only 14 days of data can be processed at a time. Data\n              cannot be shown between years. Data is only available after\n              2017-09-26.\n            </p>\n            <Formik\n              validationSchema={validationSchema}\n              initialValues={{\n                end,\n                start,\n              }}\n              onSubmit={(values) => console.log(values)}\n            >\n              {({\n                values,\n                touched,\n                handleSubmit,\n\n                errors,\n                handleBlur,\n                handleChange,\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <label>\n                    <h2 className=\"text\">Start</h2>\n\n                    <input\n                      required\n                      value={values.start}\n                      name=\"start\"\n                      type=\"date\"\n                      onChange={(e) => {\n                        handleChange(e);\n                        setStart(e.target.value);\n                      }}\n                      onBlur={handleBlur}\n                    />\n                    {touched.start && errors.start && (\n                      <div className=\"error\">{errors.start}</div>\n                    )}\n                  </label>\n\n                  <label>\n                    <h2 className=\"text\">End</h2>\n\n                    <input\n                      required\n                      value={values.end}\n                      name=\"end\"\n                      type=\"date\"\n                      onChange={(e) => {\n                        handleChange(e);\n                        setEnd(e.target.value);\n                      }}\n                      onBlur={handleBlur}\n                    />\n                    {touched.end && errors.end && (\n                      <div className=\"error\">{errors.end}</div>\n                    )}\n                  </label>\n                </form>\n              )}\n            </Formik>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default GraphInfo\n\n","import GraphInfo from './components/graph-info/graph.component'\n\nfunction Graph() {\n  return (\n    \n    <GraphInfo />\n      \n  \n  );\n}\n\nexport default Graph;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}